{"version":3,"sources":["components/pages/Home.js","components/pages/Join.js","components/pages/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Home","socket","document","title","useState","name","setName","code","setCode","setCodeExists","visible","setVisible","redirect","setRedirect","closeModal","localStorage","setItem","to","className","MessageTwoTone","onClick","shape","icon","QuestionOutlined","style","color","onOk","onCancel","footer","type","href","target","initialValues","remember","size","Item","placeholder","textAlign","rules","required","message","onChange","e","value","prefix","UserOutlined","marginRight","LockOutlined","width","marginLeft","marginTop","borderRadius","htmlType","fetch","then","res","json","data","response","emit","user","error","Join","usersArr","users","indexOf","Message","styled","div","Time","MessageBody","Chat","useParams","setMessage","messages","setMessages","Form","useForm","form","useEffect","getItem","on","msg","alert","info","sender","currentMessages","warning","MessageOutlined","ArrowRightOutlined","map","time","id","display","username","moment","format","setFieldsValue","sendMessage","SendOutlined","io","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e41c3829.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './Form.css'\nimport { MessageTwoTone, LockOutlined, UserOutlined, QuestionOutlined } from '@ant-design/icons';\nimport { Form, Input, Button, message, Modal } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Link, Redirect } from 'react-router-dom';\n\nfunction Home({ socket }) {\n\n    document.title = 'SecuroChat'\n\n    const [name, setName] = useState('');\n    const [code, setCode] = useState('');\n    const [codeExists, setCodeExists] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n\n    const showModal = () => {\n        setVisible(true);\n    }\n\n    const closeModal = () => {\n        setVisible(false);\n    }\n\n    const fetchAPI = () => {\n        fetch(`/api/${code}`).then(\n            res => res.json()\n        ).then(\n            data => {\n                let response = data.code;\n                if (response === 'not found') {\n                    socket.emit('createRoom', { user: name, code: code })\n                    setRedirect(true);\n                }\n\n                if (response !== 'not found') {\n                    setCodeExists(true);\n                    message.error('Room code already exists.')\n                }\n            }\n        )\n    }\n\n    localStorage.setItem('username', name);\n\n    if (redirect) {\n        return <Redirect to={`/${code}`} />\n    }\n\n    return (\n        <div className='container'>\n            <div className='header'>\n                <h1><MessageTwoTone /> SecuroChat <MessageTwoTone /></h1>\n            </div>\n            <div className='form'>\n                <div className='form-header'>\n                    <p>Create Room</p>\n                    <Button onClick={showModal} shape=\"circle\" icon={<QuestionOutlined style={{ color: 'darkslategray' }} />} />\n                    <Modal title=\"Additional Information\" visible={visible} onOk={closeModal} onCancel={closeModal}\n                        footer={[\n                            <Button type=\"primary\" key=\"back\" onClick={closeModal}>\n                                OK\n                            </Button>,\n                        ]}\n                    >\n                        <p>\n                            To create a room, enter in a username, this username is what you'll be recognized by.\n                            Then enter in a room code, this can be numbers, letters, or symbols. Once you create a room,\n                            you'll be in the chat room. You can invite your friends over to join and you can chat freely without\n                            having to worry about privacy!\n                        </p>\n                        <div>\n                            <p>\"We don't store any of your data.\"</p>\n                            <p>- <a href=\"http://arpanneupane.com\" target=\"__blank\">Arpan Neupane</a> (Creator of SecuroChat)</p>\n                        </div>\n                    </Modal>\n                </div>\n                <Form\n                    name=\"basic\"\n                    initialValues={{\n                        remember: true,\n                    }}\n                    size=\"large\"\n                >\n                    <Form.Item\n                        placeholder=\"name\"\n                        name=\"name\"\n                        style={{ textAlign: 'left !important' }}\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your name!',\n                            },\n                        ]}\n                    >\n                        <Input\n                            onChange={(e) => setName(e.target.value)}\n                            prefix={\n                                <UserOutlined\n                                    className=\"site-form-item-icon\"\n                                    style={{ marginRight: '8px' }}\n                                />\n                            }\n                            placeholder=\"Name\"\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"roomCode\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input the room code!',\n                            },\n                        ]}\n                    >\n                        <Input\n                            onChange={(e) => setCode(e.target.value)}\n                            prefix={\n                                <LockOutlined\n                                    className=\"site-form-item-icon\"\n                                    style={{ marginRight: '8px' }}\n                                />\n                            }\n                            placeholder=\"Room Code\"\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        style={{ width: '75%', marginLeft: 'auto', marginRight: 'auto', marginTop: '8px' }}\n                    >\n                        <Button style={{ width: '100%', borderRadius: '7.5px' }} type=\"primary\" htmlType=\"submit\" onClick={() => fetchAPI()}>\n                            Create Room\n                        </Button>\n                    </Form.Item>\n                </Form>\n                <div className='link'>\n                    Need to join a room? Click <Link to='/join'>here</Link>.\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default Home;","import React, { useState } from 'react'\nimport './Form.css'\nimport { MessageTwoTone, LockOutlined, UserOutlined, QuestionOutlined } from '@ant-design/icons';\nimport { Form, Input, Button, message, Modal } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Link, Redirect } from 'react-router-dom';\n\n\nfunction Join({ socket }) {\n    document.title = 'SecuroChat - Join Room'\n\n    const [name, setName] = useState('');\n    const [code, setCode] = useState('');\n    const [codeExists, setCodeExists] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n\n    const showModal = () => {\n        setVisible(true);\n    }\n\n    const closeModal = () => {\n        setVisible(false);\n    }\n\n    const fetchAPI = () => {\n        fetch(`/api/${code}`).then(\n            res => res.json()\n        ).then(\n            data => {\n                let response = data.code;\n                let usersArr = data.users;\n                if (response === 'not found') {\n                    setCodeExists(false);\n                    message.error('Room code does not exist.')\n                }\n\n                if (response !== 'not found') {\n                    setCodeExists(true);\n                    if (usersArr.indexOf(name) !== -1) {\n                        message.error(\"User with that name already exists.\")\n                    }\n                    else {\n                        socket.emit('joinRoom', { user: name, code: code })\n                        setRedirect(true);\n                    }\n                }\n\n            }\n        )\n    }\n\n    localStorage.setItem('username', name)\n\n    if (redirect) {\n        return <Redirect to={`/${code}`} />\n    }\n    return (\n        <div className='container'>\n            <div className='header'>\n                <h1><MessageTwoTone /> SecuroChat <MessageTwoTone /></h1>\n            </div>\n            <div className='form'>\n                <div className='form-header'>\n                    <p>Join Room</p>\n                    <Button onClick={showModal} shape=\"circle\" icon={<QuestionOutlined style={{ color: 'darkslategray' }} />} />\n                    <Modal title=\"Additional Information\" visible={visible} onOk={closeModal} onCancel={closeModal}\n                        footer={[\n                            <Button type=\"primary\" key=\"back\" onClick={closeModal}>\n                                OK\n                            </Button>,\n                        ]}\n                    >\n                        <p>\n                            To join a room, enter in a username, this is the name you'll be recognized by other people in the room.\n                            Then enter in a valid room, it has to exist in order for you to join. Once you're in the room, you can chat\n                            freely without worrying about privacy!\n                        </p>\n\n                        <div>\n                            <p>\"We don't store any of your data.\"</p>\n                            <p>- <a href=\"http://arpanneupane.com\" target=\"__blank\">Arpan Neupane</a> (Creator of SecuroChat)</p>\n                        </div>\n\n                    </Modal>\n                </div>\n                <Form\n                    name=\"basic\"\n                    initialValues={{\n                        remember: true,\n                    }}\n                    size=\"large\"\n                >\n                    <Form.Item\n                        placeholder=\"name\"\n                        name=\"name\"\n                        style={{ textAlign: 'left !important' }}\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your name!',\n                            },\n                        ]}\n                    >\n                        <Input\n                            onChange={(e) => setName(e.target.value)}\n                            prefix={\n                                <UserOutlined\n                                    className=\"site-form-item-icon\"\n                                    style={{ marginRight: '8px' }}\n                                />\n                            }\n                            placeholder=\"Name\"\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"roomCode\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input the room code!',\n                            },\n                        ]}\n                    >\n                        <Input\n                            onChange={(e) => setCode(e.target.value)}\n                            prefix={\n                                <LockOutlined\n                                    className=\"site-form-item-icon\"\n                                    style={{ marginRight: '8px' }}\n                                />\n                            }\n                            placeholder=\"Room Code\"\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        style={{ width: '75%', marginLeft: 'auto', marginRight: 'auto', marginTop: '8px' }}\n                    >\n                        <Button style={{ width: '100%', borderRadius: '7.5px' }} type=\"primary\" htmlType=\"submit\" onClick={() => fetchAPI()}>\n                            Join Room\n                        </Button>\n                    </Form.Item>\n                </Form>\n                <div className='link'>\n                    Need to create a room? Click <Link to='/create'>here</Link>.\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default Join;\n\n","import React, { useState, useEffect } from 'react'\nimport { Form, Input, Button, message as alert } from 'antd';\nimport { MessageTwoTone, ArrowRightOutlined, SendOutlined, MessageOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport './Chat.css'\nimport { useParams } from 'react-router-dom';\nimport styled from \"styled-components\";\nimport moment from 'moment';\nimport { Redirect } from 'react-router-dom';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nconst Message = styled.div`\nbackground-color: rgb(0,140,255);\npadding: 8px;\ncolor: #fff;\nborder-radius: 4px;\nmargin-bottom: 6px\n`\n\nconst Time = styled.div`\n`\n\nconst MessageBody = styled.div`\n`\n\nfunction Chat({ socket }) {\n    let { code } = useParams();\n    document.title = `SecuroChat - ${code}`\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [codeExists, setCodeExists] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n    const [form] = Form.useForm();\n\n    const fetchAPI = () => {\n        fetch(`/api/${code}`).then(\n            res => res.json()\n        ).then(\n            data => {\n                let response = data.code;\n                if (response === 'not found') {\n                    setCodeExists(false);\n                }\n\n                if (response !== 'not found') {\n                    setCodeExists(true);\n                }\n\n            }\n        )\n    }\n    const sendMessage = () => {\n        let username = localStorage.getItem('username')\n        socket.emit('message', {\n            sender: username,\n            message: message,\n            time: moment().format(\"h:mm a\")\n        })\n\n        form.setFieldsValue({\n            message: ''\n        });\n    }\n\n    useEffect(() => {\n        socket.emit('connectUser', (localStorage.getItem('username')))\n\n        socket.on('sysMessage', (msg) => {\n            alert.info(`${msg}`)\n        })\n\n        socket.on('chat', (msg) => {\n            if (msg.sender !== null && msg.message !== '') {\n                setMessages((currentMessages) => [...currentMessages, msg])\n                setMessage('');\n            }\n        })\n\n        socket.on('botChat', (msg) => {\n            if (msg.sender !== null && msg.message !== '') {\n                setMessages((currentMessages) => [...currentMessages, msg])\n            }\n        })\n        socket.on('inputMessage', () => {\n            alert.warning('Please input a message!')\n        })\n\n        socket.on('redirect', () => {\n            setRedirect(true)\n        })\n\n    }, [])\n\n\n    if (localStorage.getItem('username') === \"\") {\n        return <Redirect to={`/join`} />\n    }\n\n    if (redirect) {\n        return <Redirect to={`/create`} />\n    }\n\n    return (\n        <div className='container'>\n            <div className='header'>\n                <h1><MessageTwoTone /> SecuroChat <MessageTwoTone /></h1>\n            </div>\n\n            <div className='message-box'>\n                <div className='messages-header'>\n                    <p>Messages <MessageOutlined /></p>\n                    <a href=\"/\"><p title='Leave Room'>Leave <ArrowRightOutlined /></p></a>\n                </div>\n\n                <ScrollToBottom className='messages'>\n                    {messages.map(msg =>\n                        <Message key={msg.id}>\n                            <Time>{msg.time}</Time>\n                            <MessageBody>{msg.sender}: {msg.message}</MessageBody>\n                        </Message>\n                    )}\n                </ScrollToBottom>\n\n\n                <div className='message-form'>\n                    <Form\n                        form={form}\n                        style={{ marginTop: '20px', display: 'flex' }}\n                        name=\"basic\"\n                        initialValues={{\n                            remember: true,\n                        }}\n                        size=\"large\"\n                    >\n                        <Form.Item\n                            placeholder=\"Message\"\n                            name=\"message\"\n                            style={{ textAlign: 'left !important', marginRight: '8px' }}\n                        >\n                            <Input\n                                onChange={(e) => setMessage(e.target.value)}\n                                style={{ borderRadius: '4px' }}\n                                prefix={\n                                    <MessageTwoTone\n                                        className=\"site-form-item-icon\"\n                                        style={{ marginRight: '8px' }}\n                                    />\n                                }\n                                placeholder=\"Message\"\n                            />\n                        </Form.Item>\n                        <Form.Item\n                        >\n\n                            <Button title='Send Message' style={{ width: '100%', borderRadius: '4px' }} type=\"primary\" htmlType=\"submit\" onClick={() => sendMessage()}>\n                                Send <SendOutlined />\n                            </Button>\n                        </Form.Item>\n\n                    </Form>\n                </div>\n            </div>\n        </div >\n    )\n}\n\n\n\n\n\nexport default Chat","import React from 'react'\nimport Home from './components/pages/Home';\nimport Join from './components/pages/Join';\nimport Chat from './components/pages/Chat';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { io } from 'socket.io-client';\n\n\nconst socket = io();\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          <Home\n            socket={socket}\n          />\n        </Route>\n        <Route exact path='/create'>\n          <Home\n            socket={socket}\n          />\n        </Route>\n        <Route exact path='/join'>\n          <Join\n            socket={socket}\n          />\n        </Route>\n        <Route exact path='/:code?'>\n          <Chat\n            socket={socket}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}